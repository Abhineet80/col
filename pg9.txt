#include<stdio.h>
#include<stdlib.h>

typedef struct POLY {
    int coeff;
    int x, y, z;
    struct POLY* next;
} POLY;

POLY* createNode(int coeff, int x, int y, int z) {
    POLY* newNode = (POLY*)malloc(sizeof(POLY));
    if(newNode == NULL) {
        printf("Memory allocation failed\n");
        exit(0);
    }
    newNode->coeff = coeff;
    newNode->x = x;
    newNode->y = y;
    newNode->z = z;
    newNode->next = newNode; // Point next to itself as it's a circular linked list
    return newNode;
}

POLY* insertNode(POLY* last, int coeff, int x, int y, int z) {
    POLY* newNode = createNode(coeff, x, y, z);
    if(last == NULL)
        return newNode;
    newNode->next = last->next;
    last->next = newNode;
    return newNode;
}

void displayPolynomial(POLY* last) {
    POLY* p;
    if(last == NULL) {
        printf("The Polynomial is empty\n");
        return;
    }
    p = last->next; // Point to the first node in the list
    do {
        printf("%dx^%dy^%dz^%d", p->coeff, p->x, p->y, p->z);
        p = p->next;
        if(p != last->next)
            printf(" + ");
    } while(p != last->next);
    printf("\n");
}

  POLY* addPolynomials(POLY* poly1, POLY* poly2) {
    POLY* polySum = NULL;
    POLY* p1 = poly1->next;
    POLY* p2 = poly2->next;

    do {
        if(p1->x == p2->x && p1->y == p2->y && p1->z == p2->z) {
            polySum = insertNode(polySum, p1->coeff + p2->coeff, p1->x, p1->y, p1->z);
            p1 = p1->next;
            p2 = p2->next;
        }
        else if(p1->x > p2->x || (p1->x == p2->x && (p1->y > p2->y || (p1->y == p2->y && p1->z > p2->z)))) {
            polySum = insertNode(polySum, p1->coeff, p1->x, p1->y, p1->z);
            p1 = p1->next;
        }
        else {
            polySum = insertNode(polySum, p2->coeff, p2->x, p2->y, p2->z);
            p2 = p2->next;
        }
    } while(p1 != poly1->next && p2 != poly2->next);
    
    while(p1 != poly1->next) {
        polySum = insertNode(polySum, p1->coeff, p1->x, p1->y, p1->z);
        p1 = p1->next;
    }
    while(p2 != poly2->next) {
        polySum = insertNode(polySum, p2->coeff, p2->x, p2->y, p2->z);
        p2 = p2->next;
    }

    return polySum;
}


int main() {
    POLY* poly1 = NULL;
    POLY* poly2 = NULL;
    POLY* polySum = NULL;
    
    poly1 = insertNode(poly1, 6, 2, 2, 1);
    poly1 = insertNode(poly1, -4, 0, 1, 5);
    poly1 = insertNode(poly1, 3, 3, 1, 1);
    poly1 = insertNode(poly1, 2, 1, 5, 1);
    poly1 = insertNode(poly1, -2, 1, 1, 3);

    poly2 = insertNode(poly2, 6, 2, 2, 1);
    poly2 = insertNode(poly2, -4, 0, 1, 5);
    poly2 = insertNode(poly2, 3, 3, 1, 1);
    poly2 = insertNode(poly2, 2, 1, 5, 1);
    poly2 = insertNode(poly2, -2, 1, 1, 3);

    printf("Polynomial 1: ");
    displayPolynomial(poly1);
    printf("Polynomial 2: ");
    displayPolynomial(poly2);

    polySum = addPolynomials(poly1, poly2);
    printf("Sum of polynomials: ");
    displayPolynomial(polySum);

    return 0;
}
